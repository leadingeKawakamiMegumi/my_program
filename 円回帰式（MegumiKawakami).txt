#Megumi kawakami
def Circlekaiki(A):
    """最小二乗法による円フィッティングをする関数
    input: A(lastk,2) 円フィッティングする(x,y)

    output （中心x,中心y),半径
    """        

    import sklearn
    from sklearn.linear_model import LinearRegression
    #model = LinearRegression()
    model=LinearRegression(fit_intercept=False)   #切片0とは限らない

    # for i in range(0,8):
    #     fname = "test.txt"
    #     A = np.loadtxt(fname,delimiter="\t",skiprows=0)
#     A = center[1:lastk,:]
#     for dbgi in range(0,lastk-1):
#         print(A[dbgi,0],A[dbgi,1])
    # nn = lastk-1
    # A = A[0:nn,:]
    #print(A)
    #A = A
    nn = len(A)
    X = np.zeros((3,nn),float)
    y = np.zeros((nn),float)
    for i in range(0,nn):
        X[0,i] = A[i,0]
        X[1,i] = A[i,1]
        X[2,i] = 1
        y[i] = -(A[i,0]**2+A[i,1]**2)
    #print(X)
    #print(y)
    model.fit(X.T,y)
    print(model.coef_)
    a = -model.coef_[0]/2
    b = -model.coef_[1]/2
    r = a**2 + b**2 - model.coef_[2]
    r = r **0.5
    #print(a,b,r)
    circles = a,b,r
    circles = np.array(circles)
    circles = circles.astype(np.float32)
#     img0 = cv2.imread(filename,0)
#     img2 = img0

#     cv2.circle(img2, (circles[0],circles[1]),circles[2], (255, 255, 0), 1)
    return (a,b,r)